from EoS import PCSAFT
from Parameters import Parameters
import numpy as np


############################################# ÁGUA+CO2 ################################################
#COMPOSIÇÕES BASEADAS DO TRABALHO: "Speeds of Sound in Binary Mixtures of Water and Carbon Dioxide at
# Temperatures from 273 K to 313 K and at Pressures up to 50 MPa"

class Data:

    def __int__(self):
        pass

    @staticmethod
    def data():

        # These dataset were extract form the paper: Speeds of Sound in Binary Mixtures
        #of Water and Carbon Dioxide at Temperatures from 273 K to 313 K and at Pressures up to 50 MPa (Table 5)
        T = np.array([273.17, 273.19, 273.20, 273.23, 273.14, 273.13, 273.13,
                      273.13, 273.13, 273.13, 273.13, 273.12, 273.13, 273.13,
                      273.13, 278.12, 278.19, 278.22, 278.19, 278.18, 278.14,
                      278.14, 278.17, 278.19, 278.18, 278.17, 278.17, 278.16,
                      278.16, 278.16, 278.15, 278.15, 278.15, 283.18, 283.18,
                      283.18, 283.20, 283.19, 283.19, 283.17, 283.18, 283.19,
                      283.19, 283.18, 283.19, 283.19, 288.21, 288.21, 288.21,
                      288.21, 288.21, 288.21, 288.21, 288.21, 288.22, 288.22,
                      288.22, 288.22, 288.22, 288.22, 288.23, 293.21, 293.21,
                      293.22, 293.20, 293.21, 293.22, 293.22, 293.22, 293.22,
                      293.23, 293.22, 293.22, 293.22, 293.23, 293.23, 298.21,
                      298.21, 298.22, 298.22, 298.24, 298.22, 298.21, 298.25,
                      298.25, 298.21])

        P = 1e6*np.array([3.97, 5.97, 7.97, 9.97, 9.97, 11.95, 14.94, 17.93,
                          19.93, 24.92, 29.90, 34.89, 39.87, 44.85, 49.82,
                          3.63, 3.99, 5.99, 7.99, 9.98, 9.98, 11.98, 11.96,
                          14.93, 17.93, 19.92, 24.91, 27.90, 29.90, 34.88,
                          39.86, 44.84, 49.82, 3.99, 4.99, 7.99, 9.99, 11.95,
                          14.96, 17.93, 19.94, 24.90, 29.89, 34.86, 44.80, 49.78,
                          4.99, 5.97, 7.98, 9.97, 9.98, 11.96, 17.93, 14.94, 19.93,
                          24.90, 29.88, 34.86, 39.84, 44.81, 49.78, 5.99, 7.98, 9.95,
                          9.98, 11.95, 14.94, 17.93, 19.93, 24.91, 29.89, 29.89, 34.87,
                          39.85, 44.82, 49.79, 5.50, 7.50, 9.96, 9.99, 14.95, 19.95,
                          24.95, 29.94, 34.88, 39.88])

        u_exp = np.array([1433.28, 1436.05, 1438.84, 1441.50, 1441.25, 1444.05,
                          1448.15, 1452.38, 1455.33, 1462.65, 1470.03, 1477.73,
                          1485.39, 1493.30, 1501.26, 1452.58, 1453.50, 1456.24,
                          1459.12, 1462.00, 1462.00, 1464.75, 1464.84, 1469.35,
                          1473.80, 1476.68, 1484.21, 1488.81, 1491.85, 1499.39,
                          1507.17, 1515.13, 1523.13, 1472.01, 1473.63, 1477.97,
                          1480.84, 1483.93, 1488.38, 1492.84, 1495.84, 1503.55,
                          1511.23, 1518.99, 1534.80, 1542.81, 1489.28, 1490.72,
                          1493.89, 1496.89, 1497.01, 1500.13, 1509.31, 1504.63,
                          1512.43, 1520.14, 1528.09, 1535.93, 1543.81, 1551.76,
                          1559.64, 1505.04, 1508.15, 1511.42, 1511.15, 1514.42,
                          1519.16, 1523.96, 1527.07, 1534.94, 1542.93, 1542.90,
                          1550.81, 1558.87, 1566.82, 1574.82, 1516.91, 1520.12,
                          1524.07, 1524.18, 1532.16, 1540.05, 1548.15, 1556.31,
                          1564.31, 1572.30])

        return T, P, u_exp


    @classmethod
    def ARD(cls, association=0, specification=0):

        R, sigma, Ek, mi, Eabk, Kab, Kij, x, A, B, C, D, molar_mass, code, num_sites = Parameters().parameters()
        T, P, u_exp = cls.data()
        u_calc      = np.zeros(len(T))
        SAFT        = PCSAFT(R, sigma, Ek, mi, Eabk, Kab, Kij, A, B, C, D)

        for i in range(len(T)):
            u_calc[i] = SAFT.speed_of_sound(molar_mass, P[i], T[i], x, num_sites, code, association, specification)
            print(f'u(experimental): {u_exp[i]:.2f} ------------------------- u(calculated): {u_calc[i]:.2f}')

        ARD = (100/len(T))*sum(abs((u_calc-u_exp)/u_exp))

        print(f'\nAverage relative deviation (ARD%): {ARD:.4f}')
